{"version":3,"sources":["atoms.tsx","components/AddCategory.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["todoState","atom","key","default","JSON","parse","localStorage","getItem","toDoSelector","selector","get","toDos","category","categoryState","filter","todo","CategoryList","Container","styled","div","AddCategory","useRecoilState","categoryList","setCategoryList","useForm","register","handleSubmit","setValue","onSubmit","newCategory","oldCategories","label","id","Date","now","required","placeholder","map","each","className","CreateToDo","setToDos","useRecoilValue","toDo","oldToDos","text","ToDo","useSetRecoilState","onClick","targetIdx","findIndex","newToDo","slice","ToDoList","AllTodo","setCategory","useEffect","setItem","stringify","value","onInput","event","currentTarget","one","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7a9002b.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  category: string;\r\n  id: number;\r\n}\r\nexport interface ICategoryList {\r\n  label: string;\r\n  id: number;\r\n}\r\nexport const todoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: JSON.parse(localStorage.getItem(\"todos\") || \"[]\"),\r\n});\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(todoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((todo) => todo.category === category);\r\n  },\r\n});\r\nexport const categoryState = atom({\r\n  key: \"category\",\r\n  default: \"Default\",\r\n});\r\nexport const CategoryList = atom<ICategoryList[]>({\r\n  key: \"categoryList\",\r\n  default: JSON.parse(\r\n    localStorage.getItem(\"categories\") || '[{\"label\":\"Default\", \"id\":0}]'\r\n  ),\r\n});\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { CategoryList } from \"../atoms\";\r\ninterface IForm {\r\n  newCategory: string;\r\n}\r\nconst Container = styled.div`\r\n  display: flex;\r\n  position: fixed;\r\n  width: 100%;\r\n  padding: 20px 0;\r\n  bottom: 0px;\r\n  border: 1px solid black;\r\n  h1 {\r\n    margin: 0 5px;\r\n  }\r\n  .each {\r\n    border: 1px solid black;\r\n    padding: 0 2px;\r\n    margin: 0 5px;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nfunction AddCategory() {\r\n  const [categoryList, setCategoryList] = useRecoilState(CategoryList);\r\n  const onValid = ({ newCategory }: IForm) => {\r\n    setCategoryList((oldCategories) => [\r\n      { label: newCategory, id: Date.now() },\r\n      ...oldCategories,\r\n    ]);\r\n    setValue(\"newCategory\", \"\");\r\n  };\r\n  const { register, handleSubmit, setValue } = useForm<IForm>({});\r\n  return (\r\n    <>\r\n      <Container>\r\n        <form onSubmit={handleSubmit(onValid)}>\r\n          <input\r\n            {...register(\"newCategory\", {\r\n              required: \"Please write a new category\",\r\n            })}\r\n            placeholder=\"Add new Category\"\r\n          />\r\n          <button>add</button>\r\n        </form>\r\n        <h1>Category you have: </h1>\r\n        {categoryList.map((each) => {\r\n          if (each.label !== \"\") {\r\n            return <span className=\"each\">{each.label}</span>;\r\n          }\r\n        })}\r\n      </Container>\r\n      <hr />\r\n    </>\r\n  );\r\n}\r\nexport default AddCategory;\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, todoState } from \"../atoms\";\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const [toDos, setToDos] = useRecoilState(todoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const onValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      { text: toDo, category, id: Date.now() },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  const { register, handleSubmit, setValue } = useForm<IForm>({});\r\n  return (\r\n    <form onSubmit={handleSubmit(onValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a to do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>add</button>\r\n    </form>\r\n  );\r\n}\r\nexport default CreateToDo;\r\n","import { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { CategoryList, IToDo, todoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(todoState);\r\n  const categoryList = useRecoilValue(CategoryList);\r\n  const onClick = (newCategory: IToDo[\"category\"]) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIdx = oldToDos.findIndex((todo) => todo.id === id);\r\n      const newToDo = { text, id, category: newCategory };\r\n      return [\r\n        ...oldToDos.slice(0, targetIdx),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIdx + 1),\r\n      ];\r\n    });\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {categoryList.map(\r\n        (each) =>\r\n          category !== each.label && (\r\n            <button onClick={() => onClick(each.label)}>â†’{each.label}</button>\r\n          )\r\n      )}\r\n    </li>\r\n  );\r\n}\r\nexport default ToDo;\r\n","import React, { useEffect } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { CategoryList, categoryState, toDoSelector, todoState } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const AllTodo = useRecoilValue(todoState);\r\n  const toDo = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const categoryList = useRecoilValue(CategoryList);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(AllTodo));\r\n    localStorage.setItem(\"categories\", JSON.stringify(categoryList));\r\n  });\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        {categoryList.map((each) => {\r\n          return <option value={each.label}>{each.label}</option>;\r\n        })}\r\n      </select>\r\n      <CreateToDo />\r\n      {toDo.map((one) => (\r\n        <ToDo key={one.id} {...one} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default ToDoList;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <ToDoList />\r\n      <AddCategory />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { lightTheme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={lightTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  bgColor: \"white\",\r\n  textColor: \"black\",\r\n};\r\n"],"sourceRoot":""}